test.msg.1=This is a test message; do not change
test.msg.2=Test message <<in1>>; <<in2>>

UnimplementedMethodError=The method <<method>> is deprecated.
EPPDateFormatter.readDate.0=Invalid date string specified in call to fromDateTimeString; see previous message for details.
Timer.setTime.0=Failed to set the Timer for testing; see previous message for details.
Response.fromXML.0=Failed to extract element values from EPP response; <<msg>>
Greeting.fromXML.0=Invalid greeting received, see previous message for details.

ARSessionManager.configureSessions.0=Session initialisation failed for <<count>> sessions.
ARSessionManager.startup.0=The session manager failed to open <<count>> session(s).
ARSessionManager.startup.1=The session manager successfully opened <<count>> sessions.


reconfigure.open=Failed to open a session during Session Manager reconfiguration; see previous message for details.
reconfigure.pw.change.init=Attempting to change EPP client password from <<old>> to <<new>>.
reconfigure.pw.change.complete=Changed EPP client password.
reconfigure.pw.change.fail=Failed to establish a session for changing the EPP client password; see previous message for details.
reconfigure.pw.change.reinit.fail=Failed to re-initialise a Session Pool after successfully changing the EPP client password; see previous message for details.


epp.session.open.fatalerr=A request for a session was unable to be serviced.  This condition is expected to be persistent and require intervention; see the previous message for details.
epp.session.open.fail=The Session Manager failed to open a session; see the previous message for details.
epp.session.limit.exceeded=The EPP server refused the request to open another session due to the session limit being reached.
epp.session.open.fail.limit_exceeded=The maximum number of EPP sessions allowable by the server was reached while trying to open <<total>> sessions.  Only <<cutoff>> sessions were successfully opened.
epp.session.poll.open.fail=The Session Manager was unable to poll the Registry system after repeated attempts due to failures in opening a Session; see the previous message for details.  The keep-alive thread will now terminate.
epp.session.poll.cfg.fail=The Session Manager was unable to poll the Registry system due to client configuration errors; see the previous message for details.  The keep-alive thread will now terminate.
epp.session.read.timeout=Socket timeout occurred while trying to read data from an EPP session.
epp.session.acquire.timeout=Timeout occurred while waiting to acquire a session: waited <<timeout>> milliseconds.
epp.session.pool.empty.acquire.timeout=Session acquire timeout ignored while emptying the session pool - forced closure of locked session.
epp.session.pool.acquire.timeout=Session acquire timeout caused failure to get the session deemed by the pool as most appropriate.
epp.session.pool.release.notify.normal=Notifying pool of (normal) release in thread <<thread>>.
epp.session.pool.release.notify.closed=Notifying pool of (closed) release in thread <<thread>>.
epp.session.pool.release.notify.invalid=Notifying pool of (invalid) release in thread <<thread>>.
epp.session.rate.limit.exceeded=Command rate limit for <<command>> reached (<<limit>>).
epp.session.rate.limit.notexceeded=Command rate limit for <<command>> NOT reached (<<count>>/<<limit>>).

epp.server.response_time.avg=Total response time/number of commands [<<time>>/<<count>>].
epp.server.response_time.new_cmd=Response time for transaction of type <<type>> [<<interval>>ms] (first use).
epp.server.response_time.previous_cmd=Response time for transaction of type <<type>> [<<interval>>ms].
epp.server.failure.retry=Login failed due to an internal server condition not related to EPP (<<count>> times).  Transaction will be retried.  See the previous message for details.
epp.server.cmdfail=EPP command failed due to an internal server error.
epp.keepalive.cmdfail=Attempt to poll the Registry system for session keep-alive failed due to an internal server condition not related to EPP (<<count>> times).  Keep-alive will retry.

epp.login.fail.auth.pw=Incorrect password (<<pw>>) specified for user <<clID>>.
epp.login.fail.auth.match=client ID (<<clID>>) does not match certificate common name (<<cn>>).
epp.login.fail.loggedin=Attempted to login a session which was already logged in.  The session remains logged in.

timeout=Timeout occurred: waited <<timeout>> milliseconds.

net.event.socket_closed=Failed to write to socket; already closed.
net.socket.uninitialised=Attempt to use an uninitialised Session failed; invoke Session.open() before Session.write().
net.socket.open.fail=Failed to receive a Greeting from an EPP server on port <<port>> of host <<host>>.

TLSContext.createSocket.0=Fatal error: unknown_ca.  The most common cause of this error is that the system trust keystore does not contain the issuer's CA certificate.  If this is the case then import the appropriate CA certificate into <<java.home>>/lib/security/cacerts.

ssl.cert.validity.expired=SSL Certificate has expired. Contact Registrar Support immediately for instructions on how to renew your certificate.  The previous log message contains further details.
ssl.cert.validity.notyet=SSL Certificate is not yet valid.  Verify that the system clock is accurate, then contact Registrar Support for further instructions, citing this message and the log message preceding this.
ssl.keystore.npe=Unexpected and unhandled failure in loading a KeyStore from the filesystem.
ssl.keystore.unrecoverable_key=The key could not be recovered from the keystore, possibly due to an incorrect passphrase being supplied for the keystore; see the previous message for further details.
ssl.keystore.initfail=The key manager factory initialisation process failed unexpectedly; see the previous message for further details.
ssl.context.getInstance.fail=Unexpected failure of SSLContext.getInstance(TLSv1).  The required system libraries may not be available.  See the previous message for further details.
ssl.context.init.fail=A key manager factory was loaded successfully, but initialisation of the SSL context using the key manager factory failed unexpectedly.  See the previous message for details.
ssl.context.nsae=The installed security provider seems to be missing support for Transport Layer Security version 1.  See the previous message for further details.
ssl.context.kme=The SSL context failed to initialise due to a key management exception.  See the previous message for details.


xml.validation.resolve.begin=Resolving URI <<href>> using filename <<filename>>.
xml.validation.resolve.end=Resolved URI <<href>> to file <<file>> using relative named <<filename>>.
xml.validation.error=XML parsing/validation error at line <<line>>, column <<column>>.  <<message>>
xml.validation.schemaload.success=Loaded XML schema document <<schema>>.
xml.validation.schemaload.notfound=Unable to locate XML schema document file <<schema>>.
xml.validation.schemaload.ioerr=Failed to read XML schema from file <<schema>>; see previous message for details.
xml.validation.schemaload.saxerr=Failed to load XML schemas; see previous message for details.
xml.validation.source.nx=Unable to load an XML Schema Source from the specified resource; the file <<filename>> was not found in the search space.
xml.validation.schemaload.transform.disabled=Failed to locate a local resource for schema validation; schema validation will be disabled.
xml.validation.schemaload.saxerr.disabled=A source used to build a required Schema was invalid; schema validation will be disabled.
xml.datatype.config.fail.msg=Failed to load the default DatatypeFactory.  Verify that the classpath includes core system libraries and that security settings permit access to the JAXP implementation libraries.
xml.dateTime.null=Attempted to parse an empty dateTime string.

xml.writer.config.fail.msg=Failed to create an XMLWriter.  Verify that the sjsxp.jar and jsr173_api.jar are in the classpath or that your Java version is >= 1.6.0. If either of these conditions are met, contact Registrar Support, citing this message and the message preceding this (logged by the maint handler).
xml.writer.process.fail.msg=An error occurred while generating the textual representation of an XML document using an XMLStreamWriter.  Please send this message and the previous message (logged by the maint handler) to Registrar Support to investigate the cause.
EPPWriter.init.0=Failed to create a DocumentBuilder for building EPP documents; see previous message for details.

xml.parser.operation.unsupported=The XML parsing implementation chosen does not support validation of XML documents using XML schemas set via DocumentBuilderFactory.setSchema; see previous message for details.
xml.parser.feature.unsupported=The XML parsing implementation chosen does not support the secure processing feature; see the previous message for details.

file.notfound=File <<filename>> not found.

param.notnull.curExpDate=The curExpDate parameter may not be null.

thread.sleep.interrupted.ignorable=Thread interrupted while in sleep().
thread.wakeup.info=A waiting thread awoke.
startup.interruped=Thread interruped while trying to start SessionManager.

se.object.missing_arg=Object type and object identifier(s) must be specified.
se.login.missing_arg=Username, password and EPP version must all be specified in a login command.
se.info.missing_arg=ROID and password must both be specified.
se.domain.create.missing_arg=Domain name and authorisation information are required parameters.
se.domain.create.au.missing_arg=Eligibility type and registrant name are required .au extension parameters.
se.domain.create.ae.missing_arg=Eligibility type and registrant name are required .ae extension parameters.
se.domain.modify.au.missing_arg=Eligibility type and registrant name are required .au extension parameters.
se.domain.modify.ae.missing_arg=Eligibility type and registrant name are required .ae extension parameters.
se.domain.registrantTransfer.au.missing_arg=Eligibility type, registrant name and current expiry date are all required .au extension parameters.
se.domain.registrantTransfer.ae.missing_arg=Eligibility type, registrant name and current expiry date are all required .ae extension parameters.
se.domain.renew.curExpDate.missing=The current expiry date is a required parameter.
se.domain.restore.report.missing_arg=The preData, postData, delTime, resTime, resReason and statement are all required fields for a valid restore report operation.
se.domain.update.sync.exDate.missing=The expiry date is a required parameter for domain expiry synchronisation.
se.domain.update.idna.variant.missing=The domain variant is a required parameter.
se.domain.update.idna.variant.name.missing=The domain variant DNS form is a required parameter.
se.domain.update.idna.variant.userForm.missing=The domain variant user form is a required parameter.
se.domain.update.name.missing=Domain name is a required parameter to identify the domain to update.
se.command.type.missing=Command type parameter is required.
se.contact.create.missing_arg=Contact identifier, authorisation information, postal information and email address are all required contact parameters.
se.contact.update.id.missing=Contact identifier is a required parameter to identify the contact to update.
se.poll.ack.msgID.missing=The msgID is a required attribute of a message acknowledgement.
se.poll.op.missing=The op attribue is required.
se.transfer.operation.missing=The transfer operation type is required.
se.transfer.period.missing=The period to extend validity of the object by is required in this usage.
se.transfer.pw_roid.missing=An associated object's ROID and the authorisation information of that object are required.
se.transfer.pw.missing=The authorisation information of the identified object is required.
se.ar.policyDelete.missing_arg=Both name and reason must both be provided.
se.ar.domainUndelete.name.missing=Domain name must be provided.
se.ar.domainUnrenew.missing_arg=Both domain name and current expiry date must be provided.
se.ar.domain.create.ietf.idn.table=Table must not be null or empty.
se.ar.domain.check.fee=Field '<<field>>' is required.

tmch.smd.expired=SignedMarkData is not valid after <<expiry-date>>.
tmch.smd.notYetValid=SignedMarkData is not valid before <<valid-from-date>>.
tmch.smd.invalid=Invalid SignedMarkData provided.
tmch.smd.signature.missing=SignedMarkData provided is invalid as it is does not contain the Signature element.
tmch.smd.signature.invalid=Invalid Signature element in the SignedMarkData provided.
tmch.smd.cert.invalid=Invalid Certificate provided in SignedMarkData.\n<<cert-detailed-msg>>
tmch.cert.invalid.type=The certificate used in SignedMarkData is not of valid type, expected a certificate of type X509Certificate, got a certificate of type: <<provided-type>>
tmch.smd.revoked=SignedMarkData with ID: <<id>> has been revoked.
tmch.smd.cert.revoked=Invalid Certificate in SignedMarkData. The issuing authority has revoked the certificate used in SignedMarkData:\n<<cert-detailed-msg>>.